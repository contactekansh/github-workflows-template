name: Template

on:
  workflow_call:
    secrets:
      bigparser_github_PAT:
        required: true
    inputs:
      branch_name:
        default: 'xyz'
        type: string
      java_version:
        default: '11'
        type: string
      java_distribution:
        default: 'zulu'
        type: string
      cluster_name:
        default: 'xyz'
        type: string
      helm_value_file:
        default: 'xyz'
        type: string
      dockerfile_name:
        default: 'xyz'
        type: string
      iam_role:
        default: 'xyz'
        type: string
      service_name:
        default: 'xyz'
        type: string
      region:
        default: 'xyz'
        type: string
      svc_config_map_name:
        default: ''
        type: string
      common_config_map_name:
        default: ''
        type: string
      svc_properties_file_name:
        default: ''
        type: string
      common_properties_file_name:
        default: ''
        type: string
      download_dependency_from_s3:
        default: false
        type: boolean
      add_git_release:
        default: false
        type: boolean
      update_health_check_page:
        default: false
        type: boolean
      s3_dependency_bucket_name:
        default: 'xyz'
        type: string
      ecr_registry: 
        default: 'xyz'
        type: string
      namespace: 
        default: 'xyz'
        type: string
      deployment_name: 
        default: 'xyz'
        type: string
      release_name: 
        default: 'xyz'
        type: string
      github_org:  
        default: 'xyz'
        type: string
      github_devops_repo_name:  
        default: 'xyz'
        type: string
      github_common_properties_repo_name:  
        default: 'xyz'
        type: string
      branch:
        default: 'qa'
        type: string
  
permissions:
  id-token: write
  contents: read

jobs:
  build_artifact_and_deploy_to_qa:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Cache Maven Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.java_version }}
          distribution: ${{ inputs.java_distribution }}

      - name: Assume IAM Role to perform AWS task
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.iam_role }}
          aws-region: ${{ inputs.region }}
          
      - name: Deploy dist folder to s3
        if: ${{ inputs.download_dependency_from_s3 == true }}
        run: |
          aws s3 sync s3://${{ inputs.s3_dependency_bucket_name }}/ dependency/
      
      - name: Installing dependencies
        if: ${{ inputs.download_dependency_from_s3 == true }}
        run: |
          for file in dependency/*.jar; do
            mvn install:install-file -Dfile="$file"
          done
          
      - name: Build with Maven
        run: mvn clean package -Dmaven.test.skip=true
  
      # - name: Add release
      #   if: ${{ inputs.add_git_release == true }}
      #   run: |   
      #     git_tag_name=`git describe --abbrev=0 --tags`
      #     DATE=$(date +%Y-%m-%d-%H-%M)
      #     git_commit_id=`git log --format="%H" -n 1`
      #     git_author_name=`git log -1 --pretty=format:'%an'`
      #     echo -e "commit_id=$git_commit_id \nAuthor=$git_author_name \nBranch/TAG_NAME=qa/$git_tag_name \nDate=$DATE" > src/main/resources/tag_details.txt
  
      # - name: Update health check
      #   if: ${{ inputs.update_health_check_page == true }}
      #   run: |   
      #     old_value=`cat src/DevopsTestPageResource.java | grep -n "String response" | cut  -d ':' -f 1`
      #     echo $old_value
      #     new_value='String response = "ArtiFact_Date:'$1'";'
      #     echo $new_value
      #     sed -i "${old_value}s#.*#$new_value#" src/DevopsTestPageResource.java
          
      # - name: Upload Artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: my-artifact
      #     path: target/*.jar

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry: ${{ inputs.ecr_registry }}
            
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: devops/${{ inputs.dockerfile_name }}
          dockerfile: devops/${{ inputs.dockerfile_name }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.service_name }}:${{ github.sha }}
          
      - name: Fetch ConfigMap
        run: |
          git clone -b ${{ inputs.branch }} https://${{ secrets.bigparser_github_PAT }}@github.com/${{ inputs.github_org }}/${{ inputs.github_common_properties_repo_name }}.git
          aws eks update-kubeconfig --name ${{ inputs.cluster_name }} --region ${{ inputs.region }}

      - name: Create ConfigMap for common properties file (if provided)
        if: ${{ inputs.common_config_map_name != '' && inputs.common_properties_file_name != '' }}
        run: |
          kubectl create configmap ${{ inputs.common_config_map_name }} --from-file=Common_Properties_BE/${{ inputs.common_properties_file_name }} --namespace=${{ inputs.namespace }} -o yaml --dry-run | kubectl apply -f -
          
      - name: Create ConfigMap for service properties file (if provided)
        if: ${{ inputs.svc_config_map_name != '' && inputs.svc_properties_file_name != '' }}
        run: |
          kubectl create configmap ${{ inputs.svc_config_map_name }} --from-file=Common_Properties_BE/${{ inputs.svc_properties_file_name }} --namespace=${{ inputs.namespace }} -o yaml --dry-run | kubectl apply -f -
      
      - name: clone helm repo
        run: |
          git clone https://${{ secrets.bigparser_github_PAT }}@github.com/${{ inputs.github_org }}/${{ inputs.github_devops_repo_name }}.git
        shell: bash
          
      - name: Helm chart deployement
        shell: bash
        run: |
            aws eks update-kubeconfig --name ${{ inputs.cluster_name }} --region ${{ inputs.region }}
            helm upgrade --install ${{ inputs.release_name }} ${{ inputs.github_devops_repo_name }}/helm_chart -f devops/helm/${{ inputs.helm_value_file }} --set Deployment.Image.Tag=${{ github.sha }} -n ${{ inputs.namespace }}
    
      - name: Rollout status
        shell: bash
        run: |
            if ! kubectl rollout status deploy/${{ inputs.deployment_name }} -n ${{ inputs.namespace }} --timeout=300s; then
              echo "Rollout status check failed"
              exit 1
            fi
